PS C:\Users\aidan\OneDrive\Documents\-CSC3335A_SP2025R3_AI_PF_DiPesaServen_Giannasca_Varano> python firearm_classifier.py
2025-04-28 21:11:30.615695: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-04-28 21:11:31.409819: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Loading metadata...
Metadata columns: ['filename', 'uuid', 'label', 'recording_session ', 'timestamp', 'time_offset_s', 'device_name', 'device_manufacturer', 'device_model', 'microphone', 'firearm', 'caliber', 'latitude', 'longitude', 'gunshot_location_in_seconds', 'num_gunshots']
Sample data:
                                  filename                                  uuid label  ...  longitude         gunshot_location_in_seconds  num_gunshots
0  880b3ce5-9c19-4c12-a813-b223bb4f2897_v1  880b3ce5-9c19-4c12-a813-b223bb4f2897   9mm  ... -80.781939                        [1.72269841]             1
1  fed855d4-d9c4-42c5-a5c5-ddc5edd69e14_v0  fed855d4-d9c4-42c5-a5c5-ddc5edd69e14   9mm  ... -80.781939                        [1.67290249]             1
2  369d77b1-3141-40e2-8fb5-77d57d560472_v0  369d77b1-3141-40e2-8fb5-77d57d560472   9mm  ... -80.781939  [1.61977324 3.50795918 5.42746032]             3
3  cfe036af-d99f-46a5-8829-32a66b45be70_v1  cfe036af-d99f-46a5-8829-32a66b45be70   9mm  ... -80.781939  [1.75       1.98768707 2.26022676]             3
4  b0f71933-ce93-45ae-bf09-6838af56c0ee_v0  b0f71933-ce93-45ae-bf09-6838af56c0ee   9mm  ... -80.781939  [1.75       2.61845805 3.06664399]             3

[5 rows x 16 columns]
Creating dataset...

Unique firearms in metadata:
['Glock 17' 'Smith & Wesson' 'Ruger 556' 'Remington 870']

Unique calibers in metadata:
['9mm' '.38 cal' '.223 mm' '12 guage']

Available directories:
['38s&ws_dot38_caliber', 'glock_17_9mm_caliber', 'remington_870_12_gauge', 'ruger_ar_556_dot223_caliber']
C:\Users\aidan\anaconda3\Lib\site-packages\paramiko\pkey.py:82: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from this module in 48.0.0.
  "cipher": algorithms.TripleDES,
C:\Users\aidan\anaconda3\Lib\site-packages\paramiko\transport.py:219: CryptographyDeprecationWarning: Blowfish has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish and will be removed from this module in 45.0.0.
  "class": algorithms.Blowfish,
C:\Users\aidan\anaconda3\Lib\site-packages\paramiko\transport.py:243: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from this module in 48.0.0.
  "class": algorithms.TripleDES,
Processed 10 files...
Processed 20 files...
Processed 30 files...
Processed 40 files...
Processed 50 files...
Processed 60 files...
Processed 70 files...
Processed 80 files...
Processed 90 files...
Processed 100 files...
Processed 110 files...
Processed 120 files...
Processed 130 files...
Processed 140 files...
Processed 150 files...
Processed 160 files...
Processed 170 files...
Processed 180 files...
Processed 190 files...
Processed 200 files...
Processed 210 files...
Processed 220 files...
Processed 230 files...
Processed 240 files...
Processed 250 files...
Processed 260 files...
Processed 270 files...
Processed 280 files...
Processed 290 files...
Processed 300 files...
Processed 310 files...
Processed 320 files...
Processed 330 files...
Processed 340 files...
Processed 350 files...
Processed 360 files...
Processed 370 files...
Processed 380 files...
Processed 390 files...
Processed 400 files...
Processed 410 files...
Processed 420 files...
Processed 430 files...
Processed 440 files...
Processed 450 files...
Processed 460 files...
Processed 470 files...
Processed 480 files...
Processed 490 files...
Processed 500 files...
Processed 510 files...
Processed 520 files...
Processed 530 files...
Processed 540 files...
Processed 550 files...
Processed 560 files...
Processed 570 files...
Processed 580 files...
Processed 590 files...
Processed 600 files...
Processed 610 files...
Processed 620 files...
Processed 630 files...
Processed 640 files...
Processed 650 files...
Processed 660 files...
Processed 670 files...
Processed 680 files...
Processed 690 files...
Processed 700 files...
Processed 710 files...
Processed 720 files...
Processed 730 files...
Processed 740 files...
Processed 750 files...
Processed 760 files...
Processed 770 files...
Processed 780 files...
Processed 790 files...
Processed 800 files...
Processed 810 files...
Processed 820 files...
Processed 830 files...
Processed 840 files...
Processed 850 files...
Processed 860 files...
Processed 870 files...
Processed 880 files...
Processed 890 files...
Processed 900 files...
Processed 910 files...
Processed 920 files...
Processed 930 files...
Processed 940 files...
Processed 950 files...
Processed 960 files...
Processed 970 files...
Processed 980 files...
Processed 990 files...
Processed 1000 files...
Processed 1010 files...
Processed 1020 files...
Processed 1030 files...
Processed 1040 files...
Processed 1050 files...
Processed 1060 files...
Processed 1070 files...
Processed 1080 files...
Processed 1090 files...
Processed 1100 files...
Processed 1110 files...
Processed 1120 files...
Processed 1130 files...
Processed 1140 files...
Processed 1150 files...
Processed 1160 files...
Processed 1170 files...
Processed 1180 files...
Processed 1190 files...
Processed 1200 files...
Processed 1210 files...
Processed 1220 files...
Processed 1230 files...
Processed 1240 files...
Processed 1250 files...
Processed 1260 files...
Processed 1270 files...
Processed 1280 files...
Processed 1290 files...
Processed 1300 files...
Processed 1310 files...
Processed 1320 files...
Processed 1330 files...
Processed 1340 files...
Processed 1350 files...
Processed 1360 files...
Processed 1370 files...
Processed 1380 files...
Processed 1390 files...
Processed 1400 files...
Processed 1410 files...
Processed 1420 files...
Processed 1430 files...
Processed 1440 files...
Processed 1450 files...
Processed 1460 files...
Processed 1470 files...
Processed 1480 files...
Processed 1490 files...
Processed 1500 files...
Processed 1510 files...
Processed 1520 files...
Processed 1530 files...
Processed 1540 files...
Processed 1550 files...
Processed 1560 files...
Processed 1570 files...
Processed 1580 files...
Processed 1590 files...
Processed 1600 files...
Processed 1610 files...
Processed 1620 files...
Processed 1630 files...
Processed 1640 files...
Processed 1650 files...
Processed 1660 files...
Processed 1670 files...
Processed 1680 files...
Processed 1690 files...
Processed 1700 files...
Processed 1710 files...
Processed 1720 files...
Processed 1730 files...
Processed 1740 files...
Processed 1750 files...
Processed 1760 files...
Processed 1770 files...
Processed 1780 files...
Processed 1790 files...
Processed 1800 files...
Processed 1810 files...
Processed 1820 files...
Processed 1830 files...
Processed 1840 files...
Processed 1850 files...
Processed 1860 files...
Processed 1870 files...
Processed 1880 files...
Processed 1890 files...
Processed 1900 files...
Processed 1910 files...
Processed 1920 files...
Processed 1930 files...
Processed 1940 files...
Processed 1950 files...
Processed 1960 files...
Processed 1970 files...
Processed 1980 files...
Processed 1990 files...
Processed 2000 files...
Processed 2010 files...
Processed 2020 files...
Processed 2030 files...
Processed 2040 files...
Processed 2050 files...
Processed 2060 files...
Processed 2070 files...
Processed 2080 files...
Processed 2090 files...
Processed 2100 files...
Processed 2110 files...
Processed 2120 files...
Processed 2130 files...
Processed 2140 files...

Dataset creation complete:
Successfully processed: 2148 files
Failed to process: 0 files

Input shape: (1718, 29237, 1)
Number of firearm classes: 4
Number of caliber classes: 4

Training firearm classification model...
2025-04-28 21:12:37.950829: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE3 SSE4.1 SSE4.2 AVX AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Epoch 1/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 339ms/step - accuracy: 0.3086 - loss: 2.0937WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 22s 365ms/step - accuracy: 0.3088 - loss: 2.0915 - val_accuracy: 0.1581 - val_loss: 5.4401
Epoch 2/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 371ms/step - accuracy: 0.3487 - loss: 1.8296WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 393ms/step - accuracy: 0.3488 - loss: 1.8290 - val_accuracy: 0.2465 - val_loss: 6.3045
Epoch 3/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 365ms/step - accuracy: 0.3398 - loss: 1.6923 - val_accuracy: 0.2233 - val_loss: 1.7227
Epoch 4/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 346ms/step - accuracy: 0.4057 - loss: 1.5378WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.4059 - loss: 1.5369 - val_accuracy: 0.2744 - val_loss: 1.5388
Epoch 5/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 370ms/step - accuracy: 0.4376 - loss: 1.3774 - val_accuracy: 0.2442 - val_loss: 1.8652
Epoch 6/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 367ms/step - accuracy: 0.4912 - loss: 1.2238 - val_accuracy: 0.2535 - val_loss: 1.8294
Epoch 7/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 348ms/step - accuracy: 0.5479 - loss: 1.1156WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 370ms/step - accuracy: 0.5478 - loss: 1.1156 - val_accuracy: 0.3279 - val_loss: 1.4962
Epoch 8/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 367ms/step - accuracy: 0.6208 - loss: 0.9659 - val_accuracy: 0.3070 - val_loss: 1.5823
Epoch 9/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 351ms/step - accuracy: 0.6352 - loss: 0.8955WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 373ms/step - accuracy: 0.6358 - loss: 0.8948 - val_accuracy: 0.6186 - val_loss: 1.0216
Epoch 10/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 370ms/step - accuracy: 0.7029 - loss: 0.7475 - val_accuracy: 0.5558 - val_loss: 1.0868
Epoch 11/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 365ms/step - accuracy: 0.7266 - loss: 0.6829 - val_accuracy: 0.5116 - val_loss: 1.0824
Epoch 12/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 349ms/step - accuracy: 0.7546 - loss: 0.6378WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 371ms/step - accuracy: 0.7547 - loss: 0.6372 - val_accuracy: 0.8093 - val_loss: 0.5479
Epoch 13/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 373ms/step - accuracy: 0.7835 - loss: 0.5860 - val_accuracy: 0.7349 - val_loss: 0.6673
Epoch 14/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 350ms/step - accuracy: 0.8166 - loss: 0.4901WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 373ms/step - accuracy: 0.8170 - loss: 0.4891 - val_accuracy: 0.8512 - val_loss: 0.4149
Epoch 15/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 353ms/step - accuracy: 0.8581 - loss: 0.3683WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 374ms/step - accuracy: 0.8581 - loss: 0.3685 - val_accuracy: 0.8837 - val_loss: 0.3531
Epoch 16/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 356ms/step - accuracy: 0.8874 - loss: 0.3085WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 379ms/step - accuracy: 0.8873 - loss: 0.3086 - val_accuracy: 0.8884 - val_loss: 0.3204
Epoch 17/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 359ms/step - accuracy: 0.9177 - loss: 0.2408WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 382ms/step - accuracy: 0.9177 - loss: 0.2410 - val_accuracy: 0.9093 - val_loss: 0.2395
Epoch 18/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 352ms/step - accuracy: 0.9202 - loss: 0.2301WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.9203 - loss: 0.2298 - val_accuracy: 0.9302 - val_loss: 0.1936
Epoch 19/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 371ms/step - accuracy: 0.9259 - loss: 0.2051 - val_accuracy: 0.9233 - val_loss: 0.1808
Epoch 20/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9462 - loss: 0.1753 - val_accuracy: 0.9163 - val_loss: 0.2271
Epoch 21/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 353ms/step - accuracy: 0.9498 - loss: 0.1636WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 374ms/step - accuracy: 0.9498 - loss: 0.1636 - val_accuracy: 0.9395 - val_loss: 0.1714
Epoch 22/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 373ms/step - accuracy: 0.9614 - loss: 0.1182 - val_accuracy: 0.9256 - val_loss: 0.1980
Epoch 23/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 353ms/step - accuracy: 0.9624 - loss: 0.1245WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 376ms/step - accuracy: 0.9623 - loss: 0.1245 - val_accuracy: 0.9465 - val_loss: 0.1381
Epoch 24/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 374ms/step - accuracy: 0.9633 - loss: 0.1279 - val_accuracy: 0.9302 - val_loss: 0.1990
Epoch 25/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9515 - loss: 0.1395 - val_accuracy: 0.8977 - val_loss: 0.2519
Epoch 26/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 366ms/step - accuracy: 0.9582 - loss: 0.1213 - val_accuracy: 0.9395 - val_loss: 0.1529
Epoch 27/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 365ms/step - accuracy: 0.9641 - loss: 0.1031 - val_accuracy: 0.8930 - val_loss: 0.2915
Epoch 28/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 384ms/step - accuracy: 0.9330 - loss: 0.1740 - val_accuracy: 0.9279 - val_loss: 0.2118
Epoch 29/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 355ms/step - accuracy: 0.9818 - loss: 0.0668WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 377ms/step - accuracy: 0.9817 - loss: 0.0668 - val_accuracy: 0.9512 - val_loss: 0.1434
Epoch 30/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 369ms/step - accuracy: 0.9773 - loss: 0.0647 - val_accuracy: 0.9512 - val_loss: 0.1537
Epoch 31/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 350ms/step - accuracy: 0.9879 - loss: 0.0412WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 372ms/step - accuracy: 0.9879 - loss: 0.0412 - val_accuracy: 0.9651 - val_loss: 0.1289
Epoch 32/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 377ms/step - accuracy: 0.9932 - loss: 0.0315 - val_accuracy: 0.9605 - val_loss: 0.1289
Epoch 33/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9889 - loss: 0.0366 - val_accuracy: 0.9512 - val_loss: 0.1397
Epoch 34/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 371ms/step - accuracy: 0.9885 - loss: 0.0361 - val_accuracy: 0.9535 - val_loss: 0.1384
Epoch 35/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9756 - loss: 0.0756 - val_accuracy: 0.9419 - val_loss: 0.1915
Epoch 36/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 374ms/step - accuracy: 0.9689 - loss: 0.0952 - val_accuracy: 0.9163 - val_loss: 0.2890
Epoch 37/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 366ms/step - accuracy: 0.9763 - loss: 0.0687 - val_accuracy: 0.9372 - val_loss: 0.2237
Epoch 38/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9839 - loss: 0.0483 - val_accuracy: 0.9465 - val_loss: 0.1652
Epoch 39/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 365ms/step - accuracy: 0.9818 - loss: 0.0564 - val_accuracy: 0.9558 - val_loss: 0.1345
Epoch 40/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.9890 - loss: 0.0402 - val_accuracy: 0.9442 - val_loss: 0.1575
Epoch 41/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9930 - loss: 0.0362 - val_accuracy: 0.9465 - val_loss: 0.1514

Training caliber classification model...
Epoch 1/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 349ms/step - accuracy: 0.3207 - loss: 2.1651WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 22s 377ms/step - accuracy: 0.3211 - loss: 2.1615 - val_accuracy: 0.1581 - val_loss: 19.3956
Epoch 2/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 355ms/step - accuracy: 0.3819 - loss: 1.6436WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 379ms/step - accuracy: 0.3819 - loss: 1.6435 - val_accuracy: 0.1628 - val_loss: 26.0462
Epoch 3/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 370ms/step - accuracy: 0.4080 - loss: 1.4897 - val_accuracy: 0.1581 - val_loss: 36.9404
Epoch 4/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 348ms/step - accuracy: 0.4472 - loss: 1.4391WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 370ms/step - accuracy: 0.4463 - loss: 1.4417 - val_accuracy: 0.2837 - val_loss: 27.0135
Epoch 5/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 355ms/step - accuracy: 0.4135 - loss: 1.4764WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 377ms/step - accuracy: 0.4135 - loss: 1.4762 - val_accuracy: 0.2884 - val_loss: 4.7901
Epoch 6/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 376ms/step - accuracy: 0.4151 - loss: 1.4782 - val_accuracy: 0.2767 - val_loss: 1.6083
Epoch 7/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 350ms/step - accuracy: 0.4517 - loss: 1.3491WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 372ms/step - accuracy: 0.4518 - loss: 1.3483 - val_accuracy: 0.3605 - val_loss: 1.4276
Epoch 8/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 372ms/step - accuracy: 0.4758 - loss: 1.1997 - val_accuracy: 0.3605 - val_loss: 1.4568
Epoch 9/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 351ms/step - accuracy: 0.5380 - loss: 1.0987WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 373ms/step - accuracy: 0.5379 - loss: 1.0985 - val_accuracy: 0.4186 - val_loss: 1.2783
Epoch 10/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 361ms/step - accuracy: 0.5639 - loss: 1.0214WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 383ms/step - accuracy: 0.5640 - loss: 1.0212 - val_accuracy: 0.4837 - val_loss: 1.2782
Epoch 11/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 356ms/step - accuracy: 0.6183 - loss: 0.9615WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 378ms/step - accuracy: 0.6184 - loss: 0.9612 - val_accuracy: 0.5116 - val_loss: 1.0661
Epoch 12/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 356ms/step - accuracy: 0.6443 - loss: 0.8436WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 378ms/step - accuracy: 0.6448 - loss: 0.8428 - val_accuracy: 0.5186 - val_loss: 1.0914
Epoch 13/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 352ms/step - accuracy: 0.7167 - loss: 0.7410WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 374ms/step - accuracy: 0.7168 - loss: 0.7407 - val_accuracy: 0.6907 - val_loss: 0.7687
Epoch 14/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 354ms/step - accuracy: 0.7444 - loss: 0.6068WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.7446 - loss: 0.6065 - val_accuracy: 0.7302 - val_loss: 0.6819
Epoch 15/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 370ms/step - accuracy: 0.8261 - loss: 0.5031 - val_accuracy: 0.7209 - val_loss: 0.6695
Epoch 16/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 365ms/step - accuracy: 0.7336 - loss: 0.6797 - val_accuracy: 0.6581 - val_loss: 0.8525
Epoch 17/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 353ms/step - accuracy: 0.7897 - loss: 0.5417WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.7901 - loss: 0.5412 - val_accuracy: 0.8279 - val_loss: 0.4579
Epoch 18/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 353ms/step - accuracy: 0.8823 - loss: 0.3347WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.8822 - loss: 0.3350 - val_accuracy: 0.8907 - val_loss: 0.3366
Epoch 19/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.8330 - loss: 0.4734 - val_accuracy: 0.8744 - val_loss: 0.3522
Epoch 20/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 362ms/step - accuracy: 0.9015 - loss: 0.2774WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 386ms/step - accuracy: 0.9015 - loss: 0.2773 - val_accuracy: 0.9279 - val_loss: 0.2301
Epoch 21/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 359ms/step - accuracy: 0.9290 - loss: 0.2277WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 383ms/step - accuracy: 0.9291 - loss: 0.2277 - val_accuracy: 0.9395 - val_loss: 0.1996
Epoch 22/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 378ms/step - accuracy: 0.9412 - loss: 0.1920 - val_accuracy: 0.9302 - val_loss: 0.1967
Epoch 23/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 380ms/step - accuracy: 0.9508 - loss: 0.1510 - val_accuracy: 0.9023 - val_loss: 0.2741
Epoch 24/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 364ms/step - accuracy: 0.9585 - loss: 0.1277 - val_accuracy: 0.9372 - val_loss: 0.1728
Epoch 25/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 371ms/step - accuracy: 0.9707 - loss: 0.0971 - val_accuracy: 0.9326 - val_loss: 0.1903
Epoch 26/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 350ms/step - accuracy: 0.9734 - loss: 0.0956WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 372ms/step - accuracy: 0.9733 - loss: 0.0958 - val_accuracy: 0.9442 - val_loss: 0.1575
Epoch 27/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 0s 354ms/step - accuracy: 0.9756 - loss: 0.0705WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 375ms/step - accuracy: 0.9756 - loss: 0.0706 - val_accuracy: 0.9512 - val_loss: 0.1691
Epoch 28/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 368ms/step - accuracy: 0.9796 - loss: 0.0727 - val_accuracy: 0.9372 - val_loss: 0.1643
Epoch 29/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 373ms/step - accuracy: 0.9802 - loss: 0.0783 - val_accuracy: 0.9372 - val_loss: 0.1497
Epoch 30/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 365ms/step - accuracy: 0.9821 - loss: 0.0635 - val_accuracy: 0.9442 - val_loss: 0.1623
Epoch 31/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 371ms/step - accuracy: 0.9798 - loss: 0.0687 - val_accuracy: 0.9326 - val_loss: 0.1821
Epoch 32/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 372ms/step - accuracy: 0.9827 - loss: 0.0585 - val_accuracy: 0.9256 - val_loss: 0.2044
Epoch 33/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 372ms/step - accuracy: 0.9762 - loss: 0.0737 - val_accuracy: 0.9395 - val_loss: 0.1519
Epoch 34/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 367ms/step - accuracy: 0.9876 - loss: 0.0559 - val_accuracy: 0.9279 - val_loss: 0.2204
Epoch 35/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 22s 401ms/step - accuracy: 0.9758 - loss: 0.0738 - val_accuracy: 0.9279 - val_loss: 0.2218
Epoch 36/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 22s 406ms/step - accuracy: 0.9769 - loss: 0.0658 - val_accuracy: 0.9349 - val_loss: 0.2564
Epoch 37/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 381ms/step - accuracy: 0.9730 - loss: 0.0777 - val_accuracy: 0.9279 - val_loss: 0.2624
Epoch 38/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 21s 384ms/step - accuracy: 0.9864 - loss: 0.0439 - val_accuracy: 0.9442 - val_loss: 0.1684
Epoch 39/50
54/54 ━━━━━━━━━━━━━━━━━━━━ 20s 366ms/step - accuracy: 0.9778 - loss: 0.0773 - val_accuracy: 0.9256 - val_loss: 0.3216
